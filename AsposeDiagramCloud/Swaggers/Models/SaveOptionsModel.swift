//
// SaveOptionsModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class SaveOptionsModel: Codable {

    public enum SaveFormat: String, Codable { 
        case RAWVDX_ENUMVDX = "'{raw=VDX, enum=Vdx}'"
        case RAWVSX_ENUMVSX = "'{raw=VSX, enum=Vsx}'"
        case RAWVTX_ENUMVTX = "'{raw=VTX, enum=Vtx}'"
        case RAWTIFF_ENUMTIFF = "'{raw=TIFF, enum=Tiff}'"
        case RAWPNG_ENUMPNG = "'{raw=PNG, enum=Png}'"
        case RAWBMP_ENUMBMP = "'{raw=BMP, enum=Bmp}'"
        case RAWEMF_ENUMEMF = "'{raw=EMF, enum=Emf}'"
        case RAWJPEG_ENUMJPEG = "'{raw=JPEG, enum=Jpeg}'"
        case RAWPDF_ENUMPDF = "'{raw=PDF, enum=Pdf}'"
        case RAWXPS_ENUMXPS = "'{raw=XPS, enum=Xps}'"
        case RAWGIF_ENUMGIF = "'{raw=GIF, enum=Gif}'"
        case RAWHTML_ENUMHTML = "'{raw=HTML, enum=Html}'"
        case RAWSVG_ENUMSVG = "'{raw=SVG, enum=Svg}'"
        case RAWSWF_ENUMSWF = "'{raw=SWF, enum=Swf}'"
        case RAWXAML_ENUMXAML = "'{raw=XAML, enum=Xaml}'"
        case RAWVSDX_ENUMVSDX = "'{raw=VSDX, enum=Vsdx}'"
        case RAWVSTX_ENUMVSTX = "'{raw=VSTX, enum=Vstx}'"
        case RAWVSSX_ENUMVSSX = "'{raw=VSSX, enum=Vssx}'"
        case RAWVSDM_ENUMVSDM = "'{raw=VSDM, enum=Vsdm}'"
        case RAWVSSM_ENUMVSSM = "'{raw=VSSM, enum=Vssm}'"
        case RAWVSTM_ENUMVSTM = "'{raw=VSTM, enum=Vstm}'"
    }
    public var saveFormat: SaveFormat?
    public var defaultFont: String?

public enum CodingKeys: String, CodingKey { 
        case saveFormat = "SaveFormat"
        case defaultFont = "DefaultFont"
    }

    public init(saveFormat: SaveFormat?, defaultFont: String?) {
        self.saveFormat = saveFormat
        self.defaultFont = defaultFont
    }

    // Encodable protocol methods
    
    public func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(saveFormat, forKey: "SaveFormat")
        try container.encodeIfPresent(defaultFont, forKey: "DefaultFont")
    }
    
    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        saveFormat = try container.decodeIfPresent(SaveFormat.self, forKey: "SaveFormat")
        defaultFont = try container.decodeIfPresent(String.self, forKey: "DefaultFont")
    }

}

