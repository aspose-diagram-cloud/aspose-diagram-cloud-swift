//
// DrawShapeData.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class DrawShapeData: Codable {

    public var pinX: Double
    public var pinY: Double
    public var width: Double
    public var height: Double
    public var shapeStyleData: ShapeStyleData?
    public var text: String?
    public var textStyleData: TextStyleData?

public enum CodingKeys: String, CodingKey { 
        case pinX = "PinX"
        case pinY = "PinY"
        case width = "Width"
        case height = "Height"
        case shapeStyleData = "ShapeStyleData"
        case text = "Text"
        case textStyleData = "TextStyleData"
    }

    public init(pinX: Double, pinY: Double, width: Double, height: Double, shapeStyleData: ShapeStyleData?, text: String?, textStyleData: TextStyleData?) {
        self.pinX = pinX
        self.pinY = pinY
        self.width = width
        self.height = height
        self.shapeStyleData = shapeStyleData
        self.text = text
        self.textStyleData = textStyleData
    }

    // Encodable protocol methods
    
    public func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(pinX, forKey: "PinX")
        try container.encodeIfPresent(pinY, forKey: "PinY")
        try container.encodeIfPresent(width, forKey: "Width")
        try container.encodeIfPresent(height, forKey: "Height")
        try container.encodeIfPresent(shapeStyleData, forKey: "ShapeStyleData")
        try container.encodeIfPresent(text, forKey: "Text")
        try container.encodeIfPresent(textStyleData, forKey: "TextStyleData")
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        pinX = try container.decodeIfPresent(Double.self, forKey: "PinX")!
        pinY = try container.decodeIfPresent(Double.self, forKey: "PinY")!
        width = try container.decodeIfPresent(Double.self, forKey: "Width")!
        height = try container.decodeIfPresent(Double.self, forKey: "Height")!
        shapeStyleData = try container.decodeIfPresent(ShapeStyleData.self, forKey: "ShapeStyleData")
        text = try container.decodeIfPresent(String.self, forKey: "Text")
        textStyleData = try container.decodeIfPresent(TextStyleData.self, forKey: "TextStyleData")
    }

}

