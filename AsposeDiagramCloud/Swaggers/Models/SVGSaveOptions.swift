//
// SVGSaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class SVGSaveOptions: RenderingSaveOptions {

    public var exportHiddenPage: Bool?
    public var quality: Int32?
    public var pageIndex: Int32?
    public var sVGFitToViewPort: Bool?
    public var exportElementAsRectTag: Bool?

public enum CodingKeys: String, CodingKey {
        case exportHiddenPage = "ExportHiddenPage"
        case quality = "Quality"
        case pageIndex = "PageIndex"
        case sVGFitToViewPort = "SVGFitToViewPort"
        case exportElementAsRectTag = "ExportElementAsRectTag"
    }

    public init(saveFormat: SaveFormat?, defaultFont: String?, area: RectangleF?, exportGuideShapes: Bool?, pageSize: PageSize?, isExportComments: Bool?, exportHiddenPage: Bool?, quality: Int32?, pageIndex: Int32?, sVGFitToViewPort: Bool?, exportElementAsRectTag: Bool?) {
        self.exportHiddenPage = exportHiddenPage
        self.quality = quality
        self.pageIndex = pageIndex
        self.sVGFitToViewPort = sVGFitToViewPort
        self.exportElementAsRectTag = exportElementAsRectTag
        super.init(saveFormat: saveFormat, defaultFont: defaultFont, area: area, exportGuideShapes: exportGuideShapes, pageSize: pageSize, isExportComments: isExportComments)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(exportHiddenPage, forKey: "ExportHiddenPage")
        try container.encodeIfPresent(quality, forKey: "Quality")
        try container.encodeIfPresent(pageIndex, forKey: "PageIndex")
        try container.encodeIfPresent(sVGFitToViewPort, forKey: "SVGFitToViewPort")
        try container.encodeIfPresent(exportElementAsRectTag, forKey: "ExportElementAsRectTag")
        
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        exportHiddenPage = try container.decodeIfPresent(Bool.self, forKey: "ExportHiddenPage")
        quality = try container.decodeIfPresent(Int32.self, forKey: "Quality")
        pageIndex = try container.decodeIfPresent(Int32.self, forKey: "PageIndex")
        sVGFitToViewPort = try container.decodeIfPresent(Bool.self, forKey: "SVGFitToViewPort")
        exportElementAsRectTag = try container.decodeIfPresent(Bool.self, forKey: "ExportElementAsRectTag")
        
        try super.init(from: decoder)
    }


}

