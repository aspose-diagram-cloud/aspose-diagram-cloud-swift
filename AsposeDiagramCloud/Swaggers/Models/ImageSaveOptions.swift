//
// ImageSaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class ImageSaveOptions: RenderingSaveOptions {

    public enum TiffCompression: String, Codable { 
        case None = "None"
        case Rle = "Rle"
        case Ccitt3 = "Ccitt3"
        case Ccitt4 = "Ccitt4"
        case Lzw = "Lzw"
    }
    public enum ImageColorMode: String, Codable { 
        case None = "None"
        case Grayscale = "Grayscale"
        case BlackAndWhite = "BlackAndWhite"
    }
    public enum PixelOffsetMode: String, Codable { 
        case Default = "Default"
        case HighSpeed = "HighSpeed"
        case HighQuality = "HighQuality"
        case None = "None"
        case Half = "Half"
        case Invalid = "Invalid"
    }
    public enum SmoothingMode: String, Codable { 
        case Default = "Default"
        case HighSpeed = "HighSpeed"
        case HighQuality = "HighQuality"
        case None = "None"
        case AntiAlias = "AntiAlias"
        case Invalid = "Invalid"
    }
    public enum CompositingQuality: String, Codable { 
        case Default = "Default"
        case HighSpeed = "HighSpeed"
        case HighQuality = "HighQuality"
        case GammaCorrected = "GammaCorrected"
        case AssumeLinear = "AssumeLinear"
        case Invalid = "Invalid"
    }
    public enum InterpolationMode: String, Codable { 
        case Default = "Default"
        case Low = "Low"
        case High = "High"
        case Bilinear = "Bilinear"
        case Bicubic = "Bicubic"
        case NearestNeighbor = "NearestNeighbor"
        case HighQualityBilinear = "HighQualityBilinear"
        case HighQualityBicubic = "HighQualityBicubic"
        case Invalid = "Invalid"
    }

    public var imageBrightness: Double?
    public var imageContrast: Double?
    public var jpegQuality: Int32?
    public var pageCount: Int32?
    public var resolution: Double?
    public var scale: Double?
    public var tiffCompression: TiffCompression?
    public var exportHiddenPage: Bool?
    public var imageColorMode: ImageColorMode?
    public var pageIndex: Int32?
    public var saveForegroundPagesOnly: Bool?
    public var sameAsPdfConversionArea: Bool?
    public var pixelOffsetMode: PixelOffsetMode?
    public var smoothingMode: SmoothingMode?
    public var compositingQuality: CompositingQuality?
    public var interpolationMode: InterpolationMode?

public enum CodingKeys: String, CodingKey {
        case imageBrightness = "ImageBrightness"
        case imageContrast = "ImageContrast"
        case jpegQuality = "JpegQuality"
        case pageCount = "PageCount"
        case resolution = "Resolution"
        case scale = "Scale"
        case tiffCompression = "TiffCompression"
        case exportHiddenPage = "ExportHiddenPage"
        case imageColorMode = "ImageColorMode"
        case pageIndex = "PageIndex"
        case saveForegroundPagesOnly = "SaveForegroundPagesOnly"
        case sameAsPdfConversionArea = "SameAsPdfConversionArea"
        case pixelOffsetMode = "PixelOffsetMode"
        case smoothingMode = "SmoothingMode"
        case compositingQuality = "CompositingQuality"
        case interpolationMode = "InterpolationMode"
    }

    public init(saveFormat: SaveFormat?, defaultFont: String?, area: RectangleF?, exportGuideShapes: Bool?, pageSize: PageSize?, isExportComments: Bool?, imageBrightness: Double?, imageContrast: Double?, jpegQuality: Int32?, pageCount: Int32?, resolution: Double?, scale: Double?, tiffCompression: TiffCompression?, exportHiddenPage: Bool?, imageColorMode: ImageColorMode?, pageIndex: Int32?, saveForegroundPagesOnly: Bool?, sameAsPdfConversionArea: Bool?, pixelOffsetMode: PixelOffsetMode?, smoothingMode: SmoothingMode?, compositingQuality: CompositingQuality?, interpolationMode: InterpolationMode?) {
        self.imageBrightness = imageBrightness
        self.imageContrast = imageContrast
        self.jpegQuality = jpegQuality
        self.pageCount = pageCount
        self.resolution = resolution
        self.scale = scale
        self.tiffCompression = tiffCompression
        self.exportHiddenPage = exportHiddenPage
        self.imageColorMode = imageColorMode
        self.pageIndex = pageIndex
        self.saveForegroundPagesOnly = saveForegroundPagesOnly
        self.sameAsPdfConversionArea = sameAsPdfConversionArea
        self.pixelOffsetMode = pixelOffsetMode
        self.smoothingMode = smoothingMode
        self.compositingQuality = compositingQuality
        self.interpolationMode = interpolationMode
        super.init(saveFormat: saveFormat, defaultFont: defaultFont, area: area, exportGuideShapes: exportGuideShapes, pageSize: pageSize, isExportComments: isExportComments)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(imageBrightness, forKey: "ImageBrightness")
        try container.encodeIfPresent(imageContrast, forKey: "ImageContrast")
        try container.encodeIfPresent(jpegQuality, forKey: "JpegQuality")
        try container.encodeIfPresent(pageCount, forKey: "PageCount")
        
        try container.encodeIfPresent(resolution, forKey: "Resolution")
        try container.encodeIfPresent(scale, forKey: "Scale")
        try container.encodeIfPresent(tiffCompression, forKey: "TiffCompression")
        try container.encodeIfPresent(exportHiddenPage, forKey: "ExportHiddenPage")
        
        try container.encodeIfPresent(imageColorMode, forKey: "ImageColorMode")
        try container.encodeIfPresent(pageIndex, forKey: "PageIndex")
        try container.encodeIfPresent(saveForegroundPagesOnly, forKey: "SaveForegroundPagesOnly")
        try container.encodeIfPresent(sameAsPdfConversionArea, forKey: "SameAsPdfConversionArea")
        
        try container.encodeIfPresent(pixelOffsetMode, forKey: "PixelOffsetMode")
        try container.encodeIfPresent(smoothingMode, forKey: "SmoothingMode")
        try container.encodeIfPresent(compositingQuality, forKey: "CompositingQuality")
        try container.encodeIfPresent(interpolationMode, forKey: "InterpolationMode")
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        imageBrightness = try container.decodeIfPresent(Double.self, forKey: "ImageBrightness")
        imageContrast = try container.decodeIfPresent(Double.self, forKey: "ImageContrast")
        jpegQuality = try container.decodeIfPresent(Int32.self, forKey: "JpegQuality")
        pageCount = try container.decodeIfPresent(Int32.self, forKey: "PageCount")
        
        resolution = try container.decodeIfPresent(Double.self, forKey: "Resolution")
        scale = try container.decodeIfPresent(Double.self, forKey: "Scale")
        tiffCompression = try container.decodeIfPresent(TiffCompression.self, forKey: "TiffCompression")
        exportHiddenPage = try container.decodeIfPresent(Bool.self, forKey: "ExportHiddenPage")
        
        imageColorMode = try container.decodeIfPresent(ImageColorMode.self, forKey: "ImageColorMode")
        pageIndex = try container.decodeIfPresent(Int32.self, forKey: "PageIndex")
        saveForegroundPagesOnly = try container.decodeIfPresent(Bool.self, forKey: "SaveForegroundPagesOnly")
        sameAsPdfConversionArea = try container.decodeIfPresent(Bool.self, forKey: "SameAsPdfConversionArea")
        
        pixelOffsetMode = try container.decodeIfPresent(PixelOffsetMode.self, forKey: "PixelOffsetMode")
        smoothingMode = try container.decodeIfPresent(SmoothingMode.self, forKey: "SmoothingMode")
        compositingQuality = try container.decodeIfPresent(CompositingQuality.self, forKey: "CompositingQuality")
        interpolationMode = try container.decodeIfPresent(InterpolationMode.self, forKey: "InterpolationMode")
        try super.init(from: decoder)
    }

}
