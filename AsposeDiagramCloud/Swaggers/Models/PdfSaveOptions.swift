//
// PdfSaveOptions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class PdfSaveOptions: RenderingSaveOptions {

    public enum Compliance: String, Codable { 
        case Pdf15 = "Pdf15"
        case PdfA1a = "PdfA1a"
        case PdfA1b = "PdfA1b"
    }
    public enum TextCompression: String, Codable { 
        case None = "None"
        case Flate = "Flate"
    }
    public var horizontalResolution: Int32?
    public var verticalResolution: Int32?
    public var pageCount: Int32?
    public var jpegQuality: Int32?
    public var exportHiddenPage: Bool?
    public var pageIndex: Int32?
    public var saveForegroundPagesOnly: Bool?
    public var compliance: Compliance?
    public var encryptionDetails: PdfEncryptionDetails?
    public var textCompression: TextCompression?
    public var splitMultiPages: Bool?
    public var digitalSignatureDetails: PdfDigitalSignatureDetails?

public enum CodingKeys: String, CodingKey { 
        case horizontalResolution = "HorizontalResolution"
        case verticalResolution = "VerticalResolution"
        case pageCount = "PageCount"
        case jpegQuality = "JpegQuality"
        case exportHiddenPage = "ExportHiddenPage"
        case pageIndex = "PageIndex"
        case saveForegroundPagesOnly = "SaveForegroundPagesOnly"
        case compliance = "Compliance"
        case encryptionDetails = "EncryptionDetails"
        case textCompression = "TextCompression"
        case splitMultiPages = "SplitMultiPages"
        case digitalSignatureDetails = "DigitalSignatureDetails"
    }

    public init(saveFormat: SaveFormat?, defaultFont: String?, area: RectangleF?, exportGuideShapes: Bool?, pageSize: PageSize?, isExportComments: Bool?, horizontalResolution: Int32?, verticalResolution: Int32?, pageCount: Int32?, jpegQuality: Int32?, exportHiddenPage: Bool?, pageIndex: Int32?, saveForegroundPagesOnly: Bool?, compliance: Compliance?, encryptionDetails: PdfEncryptionDetails?, textCompression: TextCompression?, splitMultiPages: Bool?, digitalSignatureDetails: PdfDigitalSignatureDetails?) {
        self.horizontalResolution = horizontalResolution
        self.verticalResolution = verticalResolution
        self.pageCount = pageCount
        self.jpegQuality = jpegQuality
        self.exportHiddenPage = exportHiddenPage
        self.pageIndex = pageIndex
        self.saveForegroundPagesOnly = saveForegroundPagesOnly
        self.compliance = compliance
        self.encryptionDetails = encryptionDetails
        self.textCompression = textCompression
        self.splitMultiPages = splitMultiPages
        self.digitalSignatureDetails = digitalSignatureDetails
        super.init(saveFormat: saveFormat, defaultFont: defaultFont, area: area, exportGuideShapes: exportGuideShapes, pageSize: pageSize, isExportComments: isExportComments)
    }

    // Encodable protocol methods
    
    public override func encode(to encoder: Encoder) throws {
        
        var container = encoder.container(keyedBy: String.self)
        
        try container.encodeIfPresent(horizontalResolution, forKey: "HorizontalResolution")
        try container.encodeIfPresent(verticalResolution, forKey: "VerticalResolution")
        try container.encodeIfPresent(pageCount, forKey: "PageCount")
        try container.encodeIfPresent(jpegQuality, forKey: "JpegQuality")

        try container.encodeIfPresent(exportHiddenPage, forKey: "ExportHiddenPage")
        try container.encodeIfPresent(pageIndex, forKey: "PageIndex")
        try container.encodeIfPresent(saveForegroundPagesOnly, forKey: "SaveForegroundPagesOnly")
        try container.encodeIfPresent(compliance, forKey: "Compliance")
        
        try container.encodeIfPresent(encryptionDetails, forKey: "EncryptionDetails")
        try container.encodeIfPresent(textCompression, forKey: "TextCompression")
        try container.encodeIfPresent(splitMultiPages, forKey: "SplitMultiPages")
        try container.encodeIfPresent(digitalSignatureDetails, forKey: "DigitalSignatureDetails")
        try super.encode(to: encoder)
    }

    // Decodable protocol methods
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        
        horizontalResolution = try container.decodeIfPresent(Int32.self, forKey: "HorizontalResolution")
        verticalResolution = try container.decodeIfPresent(Int32.self, forKey: "VerticalResolution")
        pageCount = try container.decodeIfPresent(Int32.self, forKey: "PageCount")
        jpegQuality = try container.decodeIfPresent(Int32.self, forKey: "JpegQuality")
        
        exportHiddenPage = try container.decodeIfPresent(Bool.self, forKey: "ExportHiddenPage")
        pageIndex = try container.decodeIfPresent(Int32.self, forKey: "PageIndex")
        saveForegroundPagesOnly = try container.decodeIfPresent(Bool.self, forKey: "SaveForegroundPagesOnly")
        compliance = try container.decodeIfPresent(Compliance.self, forKey: "Compliance")
        
        encryptionDetails = try container.decodeIfPresent(PdfEncryptionDetails.self, forKey: "EncryptionDetails")
        textCompression = try container.decodeIfPresent(TextCompression.self, forKey: "TextCompression")
        splitMultiPages = try container.decodeIfPresent(Bool.self, forKey: "SplitMultiPages")
        digitalSignatureDetails = try container.decodeIfPresent(PdfDigitalSignatureDetails.self, forKey: "DigitalSignatureDetails")
        try super.init(from: decoder)
    }

}

