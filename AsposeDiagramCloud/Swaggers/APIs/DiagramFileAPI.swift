//
// DiagramFileAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DiagramFileAPI {
    /**
     Read document info or export.
     
     - parameter name: (path) The document name. 
     - parameter format: (query) The exported file format. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func diagramFileGetDiagram(name: String, format: String? = nil, folder: String? = nil, storage: String? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        diagramFileGetDiagramWithRequestBuilder(name: name, format: format, folder: folder, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Read document info or export.
     - GET /diagram/{name}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter format: (query) The exported file format. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func diagramFileGetDiagramWithRequestBuilder(name: String, format: String? = nil, folder: String? = nil, storage: String? = nil) -> RequestBuilder<Data> {
        var path = "/diagram/{name}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeDiagramCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format, 
            "folder": folder, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<Data>.Type = AsposeDiagramCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Convert document and save result to storage.
     
     - parameter name: (path) The document name. 
     - parameter format: (body) Save format. (optional)
     - parameter newfilename: (query) The new file name. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter isOverwrite: (query) If true overwrite the same name file.The default value is false. (optional, default to false)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func diagramFilePostSaveAs(name: String, format: FileFormatRequest? = nil, newfilename: String? = nil, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil, completion: @escaping ((_ data: SaveResponse?,_ error: Error?) -> Void)) {
        diagramFilePostSaveAsWithRequestBuilder(name: name, format: format, newfilename: newfilename, folder: folder, isOverwrite: isOverwrite, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Convert document and save result to storage.
     - POST /diagram/{name}/SaveAs
     - examples: [{contentType=application/json, example=""}]
     
     - parameter name: (path) The document name. 
     - parameter format: (body) Save format. (optional)
     - parameter newfilename: (query) The new file name. (optional)
     - parameter folder: (query) The document folder. (optional)
     - parameter isOverwrite: (query) If true overwrite the same name file.The default value is false. (optional, default to false)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaveResponse> 
     */
    open class func diagramFilePostSaveAsWithRequestBuilder(name: String, format: FileFormatRequest? = nil, newfilename: String? = nil, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil) -> RequestBuilder<SaveResponse> {
        var path = "/diagram/{name}/SaveAs"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeDiagramCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: format)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "newfilename": newfilename, 
            "folder": folder, 
            "IsOverwrite": isOverwrite, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaveResponse>.Type = AsposeDiagramCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create new diagram and save result to storage.
     
     - parameter name: (path) The new document name. 
     - parameter folder: (query) The new document folder. (optional)
     - parameter isOverwrite: (query) If true overwrite the same name file.The default value is false. (optional, default to false)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func diagramFilePutCreate(name: String, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        diagramFilePutCreateWithRequestBuilder(name: name, folder: folder, isOverwrite: isOverwrite, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new diagram and save result to storage.
     - PUT /diagram/{name}
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The new document name. 
     - parameter folder: (query) The new document folder. (optional)
     - parameter isOverwrite: (query) If true overwrite the same name file.The default value is false. (optional, default to false)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func diagramFilePutCreateWithRequestBuilder(name: String, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/diagram/{name}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeDiagramCloudAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "IsOverwrite": isOverwrite, 
            "storage": storage
        ])

        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeDiagramCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Upload file and save result to storage.
     
     - parameter srcFileName: The local file name.
     - parameter srcFileData: The local file data.
     - parameter name: (path) The document name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter isOverwrite: (query) If true overwrite the same name file.The default value is false. (optional, default to false)
     - parameter storage: (query) storage name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func diagramFilePutUpload(srcFileName: String, srcFileData: Data, name: String, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil, completion: @escaping ((_ data: SaaSposeResponse?,_ error: Error?) -> Void)) {
        diagramFilePutUploadWithRequestBuilder(srcFileName: srcFileName, srcFileData: srcFileData, name: name, folder: folder, isOverwrite: isOverwrite, storage: storage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Upload file and save result to storage.
     - PUT /diagram/{name}/upload
     - examples: [{contentType=application/json, example={
  "Status" : "Status",
  "Code" : 0
}}]
     
     - parameter name: (path) The document name. 
     - parameter folder: (query) The document folder. (optional)
     - parameter isOverwrite: (query) If true overwrite the same name file.The default value is false. (optional, default to false)
     - parameter storage: (query) storage name. (optional)

     - returns: RequestBuilder<SaaSposeResponse> 
     */
    open class func diagramFilePutUploadWithRequestBuilder(srcFileName: String, srcFileData: Data, name: String, folder: String? = nil, isOverwrite: Bool? = nil, storage: String? = nil) -> RequestBuilder<SaaSposeResponse> {
        var path = "/diagram/{name}/upload"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = AsposeDiagramCloudAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: srcFileData)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "folder": folder, 
            "IsOverwrite": isOverwrite, 
            "storage": storage
        ])
        
        let str = "form-data; filename=\"\(srcFileName)\""
        let headers: [String: String] = [
            "Accept": "application/json",
            "Content-Type": "multipart/form-data",
            "Content-Disposition": str
        ]
 
        let requestBuilder: RequestBuilder<SaaSposeResponse>.Type = AsposeDiagramCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headers)
    }

}
