//
// DiagramFileAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeDiagramCloud


class DiagramFileAPITests: AsposeDiagramCloudTests {

	override func setUp() 
	{
        super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "DiagramFileAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error DiagramFileAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
	}

	func testdiagramFileGetDiagram() 
	{
		let expectation = self.expectation(description: "testdiagramFileGetDiagram")
		let name:String = File_TEST_GET
		let format:String? = "pdf"
		let folder:String? = TEMPFOLDER
		let storage:String? = nil
		
		uploadFile(name: name) {
			DiagramFileAPI.diagramFileGetDiagram(name: name, format: format, folder: folder, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testdiagramFileGetDiagram")
					return
				}
	
				if let response = response {
					//XCTAssertEqual(response.code, 200)
                    //response is a Data of pdf file, we may write it down and check it.
                    let fileName = "testdiagramFileGetDiagram.pdf"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
	func testdiagramFilePostSaveAs() 
	{
		let expectation = self.expectation(description: "testdiagramFilePostSaveAs")
		let name:String = File_TEST_GET
		let format:FileFormatRequest? = FileFormatRequest(format: "pdf")
		let newfilename:String? = "file_saveas_1.pdf"
		let folder:String? = TEMPFOLDER
		let isOverwrite:Bool? = true
		let storage:String? = nil
		
		uploadFile(name: name) {
			DiagramFileAPI.diagramFilePostSaveAs(name: name, format: format, newfilename: newfilename, folder: folder, isOverwrite: isOverwrite, storage: storage)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testdiagramFilePostSaveAs")
					return
				}
	
				if let response = response {
					XCTAssertEqual(response.code, 200)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

    func testdiagramFilePutCreate()
    {
        let expectation = self.expectation(description: "testdiagramFilePutCreate")
        let name:String = File_TEST_GET
        let folder:String? = TEMPFOLDER
        let isOverwrite:Bool? = true
        let storage:String? = nil
        
        DiagramFileAPI.diagramFilePutCreate(name: name, folder: folder, isOverwrite: isOverwrite, storage: storage)
        {
            (response, error) in
            guard error == nil else {
                XCTFail("error testdiagramFilePutCreate")
                return
            }
            
            if let response = response {
                XCTAssertEqual(response.code, 200)
                expectation.fulfill()
            }
        }
        
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

	func testdiagramFilePutUpload() 
	{
		let expectation = self.expectation(description: "testdiagramFilePutUpload")
		let name:String = "file_upload_new_swift.png"
		let folder:String? = TEMPFOLDER
		let isOverwrite:Bool? = true
		let storage:String? = nil
        
        let srcFileName:String = "123.vsd"
        let url1: URL? = getURL(srcFileName)
        var data: Data? = nil
        do {
            data = try Data(contentsOf: url1!)
        } catch _ as Error? {
            XCTFail("error testdiagramFilePutUpload: read local file error.")
            return
        }
		
        DiagramFileAPI.diagramFilePutUpload(srcFileName: srcFileName, srcFileData: data!, name: name, folder: folder, isOverwrite: isOverwrite, storage: storage)
        {
            (response, error) in
            guard error == nil else {
                XCTFail("error testdiagramFilePutUpload")
                return
            }

            if let response = response {
                XCTAssertEqual(response.code, 200)
                expectation.fulfill()
            }
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

}
