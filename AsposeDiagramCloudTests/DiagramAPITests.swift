//
// DiagramAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeDiagramCloud

class DiagramAPITests: AsposeDiagramCloudTests {

	override func setUp() 
	{
		super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
		let expectation = self.expectation(description: "DiagramAPITestsSetUp")
		AuthAspose.checkAuth()
		{
			(authError) in
			guard authError == nil else {
			    XCTFail("error DiagramAPITestsSetUp")
			    return
			}
			expectation.fulfill() 
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
		super.tearDown()
	}

	func testconvertDocument() 
	{
		let expectation = self.expectation(description: "testconvertDocument")
		let name:String = "Convert.pdf"
        //let folder:String = StorageTestFOLDER
        let file:URL? = getURL(LocalTestSourceFile)
		let sourceFilename:String? = "Convert.pdf"
        
        DiagramAPI.convertDocument(name: name, file: file!, sourceFilename: sourceFilename)
        {
            (response, error) in
            guard error == nil else {
                XCTFail("error testconvertDocument")
                return
            }

            if let response = response {
                //response Data, we may write it down and check it.
                let fileName = "testconvertDocument.pdf"
                let filePath = NSHomeDirectory()
                let fileManager = FileManager.default
                let path = "\(filePath)/tmp/\(fileName)"
                fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                let handle = FileHandle(forWritingAtPath:path)
                handle?.write(response as Data)
                expectation.fulfill()
            }
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testcreateNew() 
	{
		let expectation = self.expectation(description: "testcreateNew")
		let name:String = "FileCreate.vdx"
		let folder:String? = StorageTestFOLDER
		let isOverwrite:Bool? = true
		
        DiagramAPI.createNew(name: name, folder: folder, isOverwrite: isOverwrite)
        {
            (response, error) in
            guard error == nil else {
                XCTFail("error testcreateNew")
                return
            }

            if let response = response {
                XCTAssertTrue(response.created != nil)
                print("testcreateNew create OK: " + response.created!)
                expectation.fulfill()
            }
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testdownloadFileWithFormat() 
	{
		let expectation = self.expectation(description: "testdownloadFileWithFormat")
		let name:String = "FileUpload.vdx"
		let format:String = "pdf"
		let folder:String? = StorageTestFOLDER
		
		uploadFile(name: name, folder: folder!) {
			DiagramAPI.downloadFileWithFormat(name: name, format: format, folder: folder)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testdownloadFileWithFormat")
					return
				}
	
				if let response = response {
                    //response Data, we may write it down and check it.
                    let fileName = "testdownloadFileWithFormat.pdf"
                    let filePath = NSHomeDirectory()
                    let fileManager = FileManager.default
                    let path = "\(filePath)/tmp/\(fileName)"
                    fileManager.createFile(atPath: path, contents:nil, attributes:nil)
                    let handle = FileHandle(forWritingAtPath:path)
                    handle?.write(response as Data)
                    expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testsaveAs() 
	{
		let expectation = self.expectation(description: "testsaveAs")
		let name:String = "FileUpload.vdx"
        let folder:String? = StorageTestFOLDER
		let saveOptionsRequest:SaveOptionsRequest = SaveOptionsRequest(fileName: "FileSaveAs.pdf", folder: folder, saveOptions: nil)
		let isOverwrite:Bool? = true
		
		uploadFile(name: name, folder: folder!) {
			DiagramAPI.saveAs(name: name, saveOptionsRequest: saveOptionsRequest, folder: folder, isOverwrite: isOverwrite)
			{
				(response, error) in
				guard error == nil else {
					XCTFail("error testsaveAs")
					return
				}
	
				if let response = response {
                    XCTAssertTrue(response.savedFile != nil)
                    print("testsaveAs OK: " + response.savedFile!)
					expectation.fulfill()
				}
			}
		}
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}
    
    func testsaveAsPDF()
    {
        let expectation = self.expectation(description: "testsaveAsPDF")
        let name:String = "FileUpload.vdx"
        let folder:String? = StorageTestFOLDER
        let saveOptions:PdfSaveOptions = PdfSaveOptions(saveFormat: nil, defaultFont: nil, area: nil, exportGuideShapes: nil, pageSize: nil, isExportComments: true, horizontalResolution: nil, verticalResolution: nil, pageCount: nil, jpegQuality: 100, exportHiddenPage: nil, pageIndex: nil, saveForegroundPagesOnly: nil, compliance: nil, encryptionDetails: nil, textCompression: nil, splitMultiPages: nil, digitalSignatureDetails: nil)
        let saveOptionsRequest:SaveOptionsRequest = SaveOptionsRequest(fileName: "FileSaveAsPDF.pdf", folder: folder, saveOptions: saveOptions)
        let isOverwrite:Bool? = true
        
        uploadFile(name: name, folder: folder!) {
            DiagramAPI.saveAs(name: name, saveOptionsRequest: saveOptionsRequest, folder: folder, isOverwrite: isOverwrite)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testsaveAsPDF")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response.savedFile != nil)
                    print("testsaveAsPDF OK: " + response.savedFile!)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testsaveAsPNG()
    {
        let expectation = self.expectation(description: "testsaveAsPNG")
        let name:String = "FileUpload.vdx"
        let folder:String? = StorageTestFOLDER
        let saveOptions:ImageSaveOptions = ImageSaveOptions(saveFormat: nil, defaultFont: nil, area: nil, exportGuideShapes: nil, pageSize: nil, isExportComments: true, imageBrightness: nil, imageContrast: nil, jpegQuality: 100, pageCount: nil, resolution: nil, scale: nil, tiffCompression: nil, exportHiddenPage: nil, imageColorMode: nil, pageIndex: nil, saveForegroundPagesOnly: nil, sameAsPdfConversionArea: nil, pixelOffsetMode: nil, smoothingMode: nil, compositingQuality: nil, interpolationMode: nil)
        let saveOptionsRequest:SaveOptionsRequest = SaveOptionsRequest(fileName: "FileSaveAs.png", folder: folder, saveOptions: saveOptions)
        let isOverwrite:Bool? = true
        
        uploadFile(name: name, folder: folder!) {
            DiagramAPI.saveAs(name: name, saveOptionsRequest: saveOptionsRequest, folder: folder, isOverwrite: isOverwrite)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testsaveAsPNG")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response.savedFile != nil)
                    print("testsaveAsPNG OK: " + response.savedFile!)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testsaveAsBMP()
    {
        let expectation = self.expectation(description: "testsaveAsBMP")
        let name:String = "FileUpload.vdx"
        let folder:String? = StorageTestFOLDER
        let saveOptions:ImageSaveOptions = ImageSaveOptions(saveFormat: nil, defaultFont: nil, area: nil, exportGuideShapes: nil, pageSize: nil, isExportComments: true, imageBrightness: nil, imageContrast: nil, jpegQuality: 100, pageCount: nil, resolution: nil, scale: nil, tiffCompression: nil, exportHiddenPage: nil, imageColorMode: nil, pageIndex: nil, saveForegroundPagesOnly: nil, sameAsPdfConversionArea: nil, pixelOffsetMode: nil, smoothingMode: nil, compositingQuality: nil, interpolationMode: nil)
        let saveOptionsRequest:SaveOptionsRequest = SaveOptionsRequest(fileName: "FileSaveAs.bmp", folder: folder, saveOptions: saveOptions)
        let isOverwrite:Bool? = true
        
        uploadFile(name: name, folder: folder!) {
            DiagramAPI.saveAs(name: name, saveOptionsRequest: saveOptionsRequest, folder: folder, isOverwrite: isOverwrite)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testsaveAsBMP")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response.savedFile != nil)
                    print("testsaveAsBMP OK: " + response.savedFile!)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testsaveAsVSSX()
    {
        let expectation = self.expectation(description: "testsaveAsVSSX")
        let name:String = "FileUpload.vdx"
        let folder:String? = StorageTestFOLDER
        let saveOptions:DiagramSaveOptions = DiagramSaveOptions(saveFormat: nil, defaultFont: nil, autoFitPageToDrawingContent: nil)
        let saveOptionsRequest:SaveOptionsRequest = SaveOptionsRequest(fileName: "FileSaveAs.vssx", folder: folder, saveOptions: saveOptions)
        let isOverwrite:Bool? = true
        
        uploadFile(name: name, folder: folder!) {
            DiagramAPI.saveAs(name: name, saveOptionsRequest: saveOptionsRequest, folder: folder, isOverwrite: isOverwrite)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testsaveAsVSSX")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response.savedFile != nil)
                    print("testsaveAsVSSX OK: " + response.savedFile!)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testsaveAsVSTM()
    {
        let expectation = self.expectation(description: "testsaveAsVSTM")
        let name:String = "FileUpload.vdx"
        let folder:String? = StorageTestFOLDER
        let saveOptions:DiagramSaveOptions = DiagramSaveOptions(saveFormat: nil, defaultFont: nil, autoFitPageToDrawingContent: nil)
        let saveOptionsRequest:SaveOptionsRequest = SaveOptionsRequest(fileName: "FileSaveAs.vstm", folder: folder, saveOptions: saveOptions)
        let isOverwrite:Bool? = true
        
        uploadFile(name: name, folder: folder!) {
            DiagramAPI.saveAs(name: name, saveOptionsRequest: saveOptionsRequest, folder: folder, isOverwrite: isOverwrite)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testsaveAsVSTM")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response.savedFile != nil)
                    print("testsaveAsVSTM OK: " + response.savedFile!)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testsaveAsSVG()
    {
        let expectation = self.expectation(description: "testsaveAsSVG")
        let name:String = "FileUpload.vdx"
        let folder:String? = StorageTestFOLDER
        let saveOptions:SVGSaveOptions = SVGSaveOptions(saveFormat: nil, defaultFont: nil, area: nil, exportGuideShapes: nil, pageSize: nil, isExportComments: nil, exportHiddenPage: nil, quality: 100, pageIndex: nil, sVGFitToViewPort: nil, exportElementAsRectTag: nil)
        let saveOptionsRequest:SaveOptionsRequest = SaveOptionsRequest(fileName: "FileSaveAs.svg", folder: folder, saveOptions: saveOptions)
        let isOverwrite:Bool? = true
        
        uploadFile(name: name, folder: folder!) {
            DiagramAPI.saveAs(name: name, saveOptionsRequest: saveOptionsRequest, folder: folder, isOverwrite: isOverwrite)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testsaveAsSVG")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response.savedFile != nil)
                    print("testsaveAsSVG OK: " + response.savedFile!)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testsaveAsSWF()
    {
        let expectation = self.expectation(description: "testsaveAsSWF")
        let name:String = "FileUpload.vdx"
        let folder:String? = StorageTestFOLDER
        let saveOptions:SWFSaveOptions = SWFSaveOptions(saveFormat: nil, defaultFont: nil, pageCount: nil, viewerIncluded: nil, pageIndex: nil, saveForegroundPagesOnly: true)
        let saveOptionsRequest:SaveOptionsRequest = SaveOptionsRequest(fileName: "FileSaveAs.swf", folder: folder, saveOptions: saveOptions)
        let isOverwrite:Bool? = true
        
        uploadFile(name: name, folder: folder!) {
            DiagramAPI.saveAs(name: name, saveOptionsRequest: saveOptionsRequest, folder: folder, isOverwrite: isOverwrite)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testsaveAsSWF")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response.savedFile != nil)
                    print("testsaveAsSWF OK: " + response.savedFile!)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testsaveAsXPS()
    {
        let expectation = self.expectation(description: "testsaveAsXPS")
        let name:String = "FileUpload.vdx"
        let folder:String? = StorageTestFOLDER
        let saveOptions:XPSSaveOptions = XPSSaveOptions(saveFormat: nil, defaultFont: nil, pageCount: nil, exportHiddenPage: nil, pageIndex: nil, saveForegroundPagesOnly: true)
        let saveOptionsRequest:SaveOptionsRequest = SaveOptionsRequest(fileName: "FileSaveAs.xps", folder: folder, saveOptions: saveOptions)
        let isOverwrite:Bool? = true
        
        uploadFile(name: name, folder: folder!) {
            DiagramAPI.saveAs(name: name, saveOptionsRequest: saveOptionsRequest, folder: folder, isOverwrite: isOverwrite)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testsaveAsXPS")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response.savedFile != nil)
                    print("testsaveAsXPS OK: " + response.savedFile!)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    
    func testsaveAsHTML()
    {
        let expectation = self.expectation(description: "testsaveAsPDF")
        let name:String = "FileUpload.vdx"
        let folder:String? = StorageTestFOLDER
        let saveOptions:HTMLSaveOptions = HTMLSaveOptions(saveFormat: nil, defaultFont: nil, area: nil, exportGuideShapes: nil, pageSize: nil, isExportComments: nil, pageCount: nil, saveToolBar: nil, exportHiddenPage: nil, pageIndex: nil, saveForegroundPagesOnly: nil, title: "Save HTML Test")
        let saveOptionsRequest:SaveOptionsRequest = SaveOptionsRequest(fileName: "FileSaveAs.html", folder: folder, saveOptions: saveOptions)
        let isOverwrite:Bool? = true
        
        uploadFile(name: name, folder: folder!) {
            DiagramAPI.saveAs(name: name, saveOptionsRequest: saveOptionsRequest, folder: folder, isOverwrite: isOverwrite)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error testsaveAsHTML")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response.savedFile != nil)
                    print("testsaveAsHTML OK: " + response.savedFile!)
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

}
