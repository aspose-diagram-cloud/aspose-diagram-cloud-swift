//
// PageAPITests.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import XCTest
@testable import AsposeDiagramCloud


class PageAPITests: AsposeDiagramCloudTests {
    
    internal static var OneTimeFlag = false

	override func setUp() 
	{
		super.setUp()
		// Put setup code here. This method is called before the invocation of each test method in the class.
        if (PageAPITests.OneTimeFlag)
        {
            return
        }
        let expectation = self.expectation(description: "PageAPITestsSetUp")
        let name:String = File_TEST_PAGE
        let folder:String? = StorageTestFOLDER
        let isOverwrite:Bool? = true
        AuthAspose.checkAuth()
        {
            (authError) in
            guard authError == nil else {
                XCTFail("error PageAPITestsSetUp")
                return
            }
                
            DiagramAPI.createNew(name: name, folder: folder, isOverwrite: isOverwrite)
            {
                (response, error) in
                guard error == nil else {
                    XCTFail("error PageAPITestsSetUp-createNew")
                    return
                }
                
                if let response = response {
                    XCTAssertTrue(response.created != nil)
                    print("PageAPITestsSetUp-createNew OK: " + response.created!)
                    PageAPITests.OneTimeFlag = true
                    expectation.fulfill()
                }
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
	}
	
	override func tearDown() 
	{
		// Put teardown code here. This method is called after the invocation of each test method in the class.
		super.tearDown()
	}

    func testputNewPage()
    {
        let expectation = self.expectation(description: "testputNewPage")
        let name:String = File_TEST_PAGE
        let pageName:String = "newPage1"
        let folder:String? = StorageTestFOLDER
        
        DiagramAPI.putNewPage(name: name, pageName: pageName, folder: folder)
        {
            (response, error) in
            guard error == nil else {
                XCTFail("error testputNewPage")
                return
            }
            
            if let response = response {
                XCTAssertTrue(response.isSuccess)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
	
	func testgetPages() 
	{
		let expectation = self.expectation(description: "testgetPages")
		let name:String = File_TEST_PAGE
		let folder:String? = StorageTestFOLDER
		
        DiagramAPI.getPages(name: name, folder: folder)
        {
            (response, error) in
            guard error == nil else {
                XCTFail("error testgetPages")
                return
            }

            if let response = response {
                let _PageCount = response.model!.count
                XCTAssertTrue(_PageCount > 0)
                expectation.fulfill()
            }
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

	func testpostPageSetup() 
	{
		let expectation = self.expectation(description: "testpostPageSetup")
		let name:String = File_TEST_PAGE
		let pageName:String = Test_Page_Name
		let pageSetting:PageSetting = PageSetting(name: nil, nameU: nil, pageWidth: 2, pageHeight: 2)
		let folder:String? = StorageTestFOLDER
		
        DiagramAPI.postPageSetup(name: name, pageName: pageName, pageSetting: pageSetting, folder: folder)
        {
            (response, error) in
            guard error == nil else {
                XCTFail("error testpostPageSetup")
                return
            }

            if let response = response {
                XCTAssertTrue(response.isSuccess)
                expectation.fulfill()
            }
        }
		self.waitForExpectations(timeout: testTimeout, handler: nil)		
	}

    func testdeletePage()
    {
        let expectation = self.expectation(description: "testdeletePage")
        let name:String = File_TEST_PAGE
        let pageName:String = "newPage1"
        let folder:String? = StorageTestFOLDER
        
        DiagramAPI.deletePage(name: name, pageName: pageName, folder: folder)
        {
            (response, error) in
            guard error == nil else {
                XCTFail("error testdeletePage")
                return
            }
            
            if let response = response {
                XCTAssertTrue(response.isSuccess)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

}
